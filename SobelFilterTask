using System;

namespace Recognizer
{
    internal static class SobelFilterTask
    {
        public static double[,] SobelFilter(double[,] g, double[,] sx)
        {
            var width = g.GetLength(0);
            var height = g.GetLength(1);
            var result = new double[width, height];
            int corPoint =(int)( sx.GetLength(0) / 2);
            for (int x = corPoint; x < width - corPoint; x++)
                for (int y = corPoint; y < height - corPoint; y++)
                {
                    double gx = GradientX(g, sx, x, y, corPoint);
                    double gy = GradientY(g, sx, x, y, corPoint);
                    result[x, y] = Math.Sqrt(gx * gx + gy * gy);
                }
            return result;
        }
        public static double GradientX(double[,] g, double[,] sx, int pozI, int pozJ, int corPoint)
        {
            double sum = 0;
            for(int i = 0; i < sx.GetLength(0); i ++)
                for(int j = 0; j < sx.GetLength(1); j++)
                {
                    sum = sum + g[i + pozI - corPoint , j + pozJ - corPoint] * sx[i, j];
                }
            return sum;
        }
        public static double GradientY(double[,] g, double[,] sx, int pozI, int pozJ, int corPoint)
        {
            double sum = 0;
            for (int i = 0; i < sx.GetLength(0); i++)
                for (int j = 0; j < sx.GetLength(1); j++)
                {
                    sum = sum + g[i + pozI - corPoint, j + pozJ - corPoint] * sx[j, i];
                }
            return sum;
        }
    }
   
}
