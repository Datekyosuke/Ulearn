using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace Digger
{
    class Terrain : ICreature
    {
        public CreatureCommand Act(int x, int y)
        {
            return new CreatureCommand() { DeltaX = 0, DeltaY = 0};
        }

        public bool DeadInConflict(ICreature conflictedObject)
        {
            return true;
        }

        public int GetDrawingPriority()
        {
            return 2;
        }

        public string GetImageFileName()
        {
            return "Terrain.png";
        }
    }
    class Player : ICreature
    {
        public static int X, Y = 0;
        public CreatureCommand Act(int x, int y)
        {
            switch(Game.KeyPressed)
            {
                case System.Windows.Forms.Keys.Up:
                    if(y - 1 >= 0 && (Game.Map[x, y - 1]?.ToString() != "Digger.Sack")) return new CreatureCommand() { DeltaX = 0, DeltaY = -1 }; else return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };
                   
                case System.Windows.Forms.Keys.Down:
                    if (y + 1 < Game.MapHeight && (Game.Map[x, y + 1]?.ToString() != "Digger.Sack")) return new CreatureCommand() { DeltaX = 0, DeltaY = 1 }; else return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };
                   
                case System.Windows.Forms.Keys.Left:
                    if (x - 1 >= 0 && (Game.Map[x - 1, y]?.ToString() != "Digger.Sack")) return new CreatureCommand() { DeltaX = -1, DeltaY = 0 }; else return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };
                  
                case System.Windows.Forms.Keys.Right:
                    if (x + 1 < Game.MapWidth && (Game.Map[x + 1, y]?.ToString() != "Digger.Sack")) return new CreatureCommand() { DeltaX = 1, DeltaY = 0 }; else return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };
                   
                default: return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };
            }

        }

        public bool DeadInConflict(ICreature conflictedObject)
        {
           // CreatureCommand a = conflictedObject.Act(0, 0);
           if(conflictedObject is Monster) return true;
            return false;
        }

        public int GetDrawingPriority()
        {
            return 1;
        }

        public string GetImageFileName()
        {
            return "Digger.png";
        }
    }

    class Sack : ICreature
    {
        int counter = new int();
        public CreatureCommand Act(int x, int y)
        {

            if (y < Game.MapHeight - 1)
            {
                var map = Game.Map[x, y + 1];
                if (map == null/* || (counter > 0 && map.ToString() == "Digger.Player") || (counter > 0 && map.ToString() == "Digger.Monster")*/)
                {
                    counter++;
                    return new CreatureCommand() { DeltaX = 0, DeltaY = 1 };
                }
            }

            if (counter >= 1 && y < Game.MapHeight - 1 && (Game.Map[x, y + 1] is Player)) { Game.Map[x, y + 1] = null; Game.IsOver = true; return new CreatureCommand() { DeltaX = 0, DeltaY = 1 }; }
            if (counter >= 1 && y < Game.MapHeight - 1 && (Game.Map[x, y + 1] is Monster)) { Game.Map[x, y + 1] = null; counter++; return new CreatureCommand() { DeltaX = 0, DeltaY = 1 }; }


            if (counter > 1)
                {
                    counter = 0;
                   
                    return new CreatureCommand() { DeltaX = 0, DeltaY = 0, TransformTo = new Gold() };

                }
            
                counter = 0;
                return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };

            
        }

        public bool DeadInConflict(ICreature conflictedObject)
        {
            return false;
        }

        public int GetDrawingPriority()
        {
            return 1;
        }

        public string GetImageFileName()
        {
            return "Sack.png";
        }
    }

    class Gold : ICreature
    {
        public CreatureCommand Act(int x, int y)
        {
            return new CreatureCommand() { DeltaX = 0, DeltaY = 0 };
        }

        public bool DeadInConflict(ICreature conflictedObject)
        {
            Game.Scores += 10;
             return true;
        }

        public int GetDrawingPriority()
        {
            return 2;
        }

        public string GetImageFileName()
        {
            return "Gold.png";
        }
    }

    class Monster : ICreature
    {
        public CreatureCommand Act(int x, int y)
        {
            
            
                int deltaX = 0;
                int deltaY = 0;

                if (PlayerIsAlive())
                {
                    if (Player.X == x)
                    {
                        if (Player.Y < y) deltaY = -1;
                        else if (Player.Y > y) deltaY = 1;
                    }
                    else if (Player.Y == y)
                    {
                        if (Player.X < x) deltaX = -1;
                        else if (Player.X > x) deltaX = 1;
                    }
                    else
                    {
                        if (Player.X < x) deltaX = -1;
                        else if (Player.X > x) deltaX = 1;
                    }
                }
                else return new CreatureCommand{DeltaX = 0, DeltaY = 0 };

            
           
            if(x + deltaX < 0 || x + deltaX > Game.MapWidth || y + deltaY < 0 || y + deltaY > Game.MapHeight)
                return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
            var map = Game.Map[x + deltaX, y + deltaY];
            if (map !=null && (map is Terrain || map is Monster || map is Sack))
                return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
            return new CreatureCommand { DeltaX = deltaX, DeltaY = deltaY };


        }

        public bool DeadInConflict(ICreature conflictedObject)
        {
            if(conflictedObject is Monster) return true;
           return false;
        }

        public int GetDrawingPriority()
        {
            return 1;
        }

        public string GetImageFileName()
        {
            return "Monster.png";
        }

        static private bool PlayerIsAlive()
        {
            for (int i = 0; i < Game.MapWidth; i++)
                for (int j = 0; j < Game.MapHeight; j++)
                {
                    var map = Game.Map[i, j];
                    if (map != null && map is Player)
                    {
                        Player.X = i;
                        Player.Y = j;
                        return true;
                    }
                }
            return false;
        }
    }
}
